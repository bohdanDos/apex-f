import * as vscode from 'vscode';

export function activate(context: vscode.ExtensionContext) {
  const disposable = vscode.commands.registerCommand('apexF.formatDocument', () => {
    const editor = vscode.window.activeTextEditor;
    if (!editor) {
      vscode.window.showInformationMessage('No active editor!');
      return;
    }

    const document = editor.document;
    const text = document.getText();
    const formatted = formatApexCode(text);

    const fullRange = new vscode.Range(
      document.positionAt(0),
      document.positionAt(text.length)
    );

    editor.edit(editBuilder => {
      editBuilder.replace(fullRange, formatted);
    });

    vscode.window.showInformationMessage('ü´° Formatted with apex F!');
  });

  context.subscriptions.push(disposable);
}

function formatApexCode(code: string): string {
  // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ (–∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ)
  code = code.replace(/(^import .*?;[\r\n]+)/gm, '').trimStart();
  const importLines = Array.from(code.matchAll(/^import .*?;$/gm), m => m[0]).sort();
  const importsBlock = importLines.length ? importLines.join('\n') + '\n\n' : '';

  // –í–∏—Ç—è–≥–Ω—É—Ç–∏ —Å—Ç—Ä—ñ–Ω–≥–∏ —Ç–∏–ø—É '...';
  const stringLiterals: string[] = [];
  code = code.replace(/'(?:[^'\\]|\\.)*?';/g, (match) => {
    stringLiterals.push(match);
    return `___STR_${stringLiterals.length - 1}___;`;
  });

  let body = code
    // –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ —ñ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –±–ª–æ–∫—ñ–≤
    .replace(/(if|else if|else|for|while|do|try|catch|finally)\s*\(/g, '$1 (')
    .replace(/\)\s*\{/g, ') {')

    // –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è catch/finally –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
    .replace(/\}\s*(catch|finally)/g, '}\n$1')

    // —Ä–æ–∑–±–∏–≤–∫–∞ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö if (...) if (...) –Ω–∞ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏
    .replace(/(if\s*\([^\)]*\))\s*(if\s*\([^\)]*\))/g, '$1 {\n  $2')

    // –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è while/do/for —â–æ —Å–∏–¥—è—Ç—å –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É
    .replace(/(while|for|do)\s*\((.*?)\)\s*\{([^{}\n]*)\}/g, (_, kw, cond, stmt) => {
      return `${kw} (${cond}) {\n  ${stmt.trim()}\n}`;
    })

    .replace(/else\s*\{/g, 'else {')
    // —Ä–æ–∑–±–∏–≤–∫–∞ –æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤ —É –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤—ñ
    .replace(/(if|else if|for|while|do|try|catch|finally)\s*\((.*?)\)\s*\{([^{}\n]*)\}/g, (_, kw, cond, stmt) => {
      return `${kw} (${cond}) {\n  ${stmt.trim()}\n}`;
    })
    // —Ä–æ–∑–±–∏–≤–∫–∞ –æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ do { ... } while (...);
    .replace(/do\s*\{([^{}\n]*)\}\s*while\s*\((.*?)\);/g, (_, body, cond) => {
      return `do {\n  ${body.trim()}\n} while (${cond});`;
    })
    // –ø–µ—Ä–µ–Ω–æ—Å–∏ –º—ñ–∂ –º–µ—Ç–æ–¥–∞–º–∏
    .replace(/\}\s*(public|private|protected)/g, '}\n\n$1')
    // –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–±—ñ–ª—É –ø–µ—Ä–µ–¥ {
    .replace(/([^\s])\s*\{/g, '$1 {')
    // –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–Ω–æ—Å –ø—ñ—Å–ª—è {
    .replace(/\{\s*(?![\r\n])/g, '{\n')
    // –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–Ω–æ—Å –ø–µ—Ä–µ–¥ }
    .replace(/([^\n])\}/g, '$1\n}')
    // –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–Ω–æ—Å –ø—ñ—Å–ª—è }, —è–∫—â–æ –¥–∞–ª—ñ –Ω–µ–º–∞—î –∫—Ä–∞–ø–∫–∏ –∑ –∫–æ–º–æ—é
    .replace(/\}(?![\r\n;])/g, '}\n')
    // —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è new Class(...) —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ–π
    .replace(/new\s+\w+\s*\(([\s\S]*?)\)\s*;/g, match => {
      const lines = match
        .replace(/\n/g, '')
        .replace(/\s+/g, ' ')
        .match(/\(([\s\S]*?)\)/)?.[1]
        ?.split(',')
        .map(line => line.trim())
        .filter(line => line.length > 0);

      if (!lines || lines.length === 0) return match;

      const maxFieldLength = Math.max(...lines.map(line => line.split('=')[0].trim().length));

      const formattedLines = lines.map(line => {
        const [key, value] = line.split('=').map(s => s.trim());
        return `  ${key.padEnd(maxFieldLength)} = ${value}`;
      });

      return match.replace(/\([\s\S]*?\)/, '(\n' + formattedLines.join(',\n') + '\n)');
    })
    // –ü—Ä–æ–ø—É—Å–∫–∞—î ; –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ for (...) —Ç–∞ –ø—ñ—Å–ª—è };
    .replace(/;(?![\r\n])(?<!\}\s*;)(?![^()]*\))/g, ';\n')
    // –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ –≤ –∫—ñ–Ω—Ü—ñ —Ä—è–¥–∫—ñ–≤
    .replace(/ +$/gm, '')
    // –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–π–Ω—ñ –ø—É—Å—Ç—ñ —Ä—è–¥–∫–∏
    .replace(/\n{3,}/g, '\n\n')
    // –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –ø—ñ—Å–ª—è ), 
    .replace(/\),\s*/g, '),\n')
    .replace(/(@\w+(?:\([^\)]*\))?)\s*(?=\w)/g, '$1\n')
    .replace(/\};(?![\r\n])/g, '};\n')
    .replace(/new\s+List<(\w+)>\s*\{([^}]+)\}/g, (_, type, listItems) => {
      const items = listItems.split(',').map((item: string) => item.trim()).filter(Boolean);
      const formatted = items.map((item: string) => `  ${item}`).join(',\n');
      return `new List<${type}> {\n${formatted}\n}`;
    })
    // –í–∏–ø—Ä–∞–≤–∏—Ç–∏ : –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏, –∑–∞ –≤–∏–Ω—è—Ç–∫–æ–º http: –∞–±–æ https:
    .replace(/(?<!https?):\s*/g, ' : ')
    // –ü—Ä–æ–±—ñ–ª–∏ –ø–µ—Ä–µ–¥ —ñ –ø—ñ—Å–ª—è =
    .replace(/\s*=\s*/g, ' = ')
    // –ü—Ä–æ–±—ñ–ª–∏ –ø–µ—Ä–µ–¥ —ñ –ø—ñ—Å–ª—è +, –∞–ª–µ –Ω–µ —á—ñ–ø–∞—Ç–∏ ++ —á–∏ -- —ñ –Ω–µ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ for(...)
    .replace(/(?<!\+)\s*\+\s*(?!\+)(?![^()]*\))/g, ' + ')
    // –∞–≤—Ç–æ—ñ–Ω–¥–µ–Ω—Ç–∞—Ü—ñ—è –ø–æ –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ
    .split('\n')
    .reduce<{ lines: string[]; level: number }>((acc, line) => {
      const trimmed = line.trim();
      if (trimmed === '') {
        acc.lines.push('');
        return acc;
      }
      if (trimmed.endsWith('}') || trimmed === '}') acc.level--;
      acc.lines.push('  '.repeat(acc.level) + trimmed);
      if (trimmed.endsWith('{')) acc.level++;
      return acc;
    }, { lines: [], level: 0 }).lines.join('\n');

  // –í—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞–∑–∞–¥ –≤—Å—ñ —Å—Ç—Ä—ñ–Ω–≥–∏
  stringLiterals.forEach((str, i) => {
    body = body.replace(`___STR_${i}___;`, str);
  });
  return importsBlock + body;
}

export function deactivate() {}